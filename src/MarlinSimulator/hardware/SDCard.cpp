
#include "SDCard.h"
#include <src/sd/SdInfo.h>

constexpr char empty_disk_100[] =
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xFE"
    "\xFF\xFF\x0C\xFE\xFF\xFF\x01\x00\x00\x00\x2F\xFB\x02\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA"
    "\xEB\x3C\x90\x6D\x6B\x66\x73\x2E\x66\x61\x74\x00\x02\x04\x04\x00"
    "\x02\x00\x02\x00\x00\xF8\xC0\x00\x20\x00\x40\x00\x00\x00\x00\x00"
    "\x2F\xFB\x02\x00\x80\x00\x29\x44\x48\x36\xEA\x53\x44\x43\x41\x52"
    "\x44\x49\x4D\x41\x47\x45\x46\x41\x54\x31\x36\x20\x20\x20\x0E\x1F"
    "\xBE\x5B\x7C\xAC\x22\xC0\x74\x0B\x56\xB4\x0E\xBB\x07\x00\xCD\x10"
    "\x5E\xEB\xF0\x32\xE4\xCD\x16\xCD\x19\xEB\xFE\x54\x68\x69\x73\x20"
    "\x69\x73\x20\x6E\x6F\x74\x20\x61\x20\x62\x6F\x6F\x74\x61\x62\x6C"
    "\x65\x20\x64\x69\x73\x6B\x2E\x20\x20\x50\x6C\x65\x61\x73\x65\x20"
    "\x69\x6E\x73\x65\x72\x74\x20\x61\x20\x62\x6F\x6F\x74\x61\x62\x6C"
    "\x65\x20\x66\x6C\x6F\x70\x70\x79\x20\x61\x6E\x64\x0D\x0A\x70\x72"
    "\x65\x73\x73\x20\x61\x6E\x79\x20\x6B\x65\x79\x20\x74\x6F\x20\x74"
    "\x72\x79\x20\x61\x67\x61\x69\x6E\x20\x2E\x2E\x2E\x20\x0D\x0A\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x55\xAA";
// + zeroed 100031488 bytes
void SDCard::generate_empty_image(std::string filename) {
  auto fp = fopen(filename.c_str(), "w+b");
  fwrite(empty_disk_100, sizeof(empty_disk_100) - 1, 1, fp);
  char zeros[512]{};
  for (std::size_t i = 0; i < 195374; i++) {
    fwrite(zeros, sizeof(zeros), 1, fp);
  }
  fclose(fp);
}

void SDCard::onByteReceived(uint8_t _byte) {
  SPISlavePeripheral::onByteReceived(_byte);
  if (getCurrentToken() != 0xFF || _byte == 0xFF) return;

  // 1 byte (cmd) + 4 byte (arg) + 1 byte (crc)
  const uint8_t cmd = _byte - 0x40;
  switch (cmd) {
    case CMD0:
    case CMD8:
    case CMD55:
    case CMD58:
    case CMD17: //read block
    case CMD24: //write block
    case CMD13:
    case ACMD41:
      setRequestedDataSize(cmd, 5);
      break;
  }
}

void SDCard::onRequestedDataReceived(uint8_t token, uint8_t* _data, size_t count) {
  SPISlavePeripheral::onRequestedDataReceived(token, _data, count);

  uint8_t crc = 0;
  // it should be handled per command, but no other call uses 5 bytes, so it's ok and simpler here
  if (count == 5) {
    currentArg = 0;
    for (int i = 0; i < 4; i++) {
      currentArg <<= 8;
      currentArg |= _data[i];
    }
    crc = _data[4];
  }

  UNUSED(crc);

  // Marlin SD2Card keep the CS LOW for multiple commands, so I need to manually clear the token, to receive next.
  clearCurrentToken();

  // printf("CMD: %d, currentArg: %d, crc: %d, count: %d\n", token, currentArg, crc, count);
  switch (token) {
    case CMD0:
      if (fp) fclose(fp);
      fp = fopen(image_filename.c_str(), "rb+");
      if (fp)
        setResponse(R1_IDLE_STATE);
      else
        setResponse(0);
      break;
    case CMD8:
      if (true/*_type == SD_CARD_TYPE_SD1*/) {
        setResponse((R1_ILLEGAL_COMMAND | R1_IDLE_STATE));
      }
      else {
        memset(buf, 0xAA, 4);
        setResponse(buf, 4);
      }
      break;
    case CMD58:
      buf[0] = R1_READY_STATE;
      memset(buf+1, 0xC0, 3);
      setResponse(buf, 4);
      break;
    case CMD17: //read block
      buf[0] = R1_READY_STATE;
      buf[1] = DATA_START_BLOCK;
      if (true  /*_type != SD_CARD_TYPE_SDHC*/) {
        currentArg >>= 9;
      }
      fseek(fp, 512 * currentArg, SEEK_SET);
      fread(buf + 2, 512, 1, fp);
      buf[512 + 2] = 0; //crc
      setResponse(buf, 512 + 3);
      break;
    case CMD24: //write block
      if (true  /*_type != SD_CARD_TYPE_SDHC*/) {
        currentArg >>= 9;
      }
      setResponse(R1_READY_STATE);
      setRequestedDataSize(DATA_START_BLOCK, 512 + 1 + 2 + 1); //token + ff (from this response) + data + 2 crc
      break;
    case CMD13:
      setResponse16(R1_READY_STATE);
      break;
    case CMD55:
    case ACMD41:
      setResponse(R1_READY_STATE);
      break;
    case DATA_START_BLOCK: // CMD24 write block
      fseek(fp, 512 * currentArg, SEEK_SET);
      fwrite(_data + 2, 512, 1, fp);
      fflush(fp);
      buf[0] = DATA_RES_ACCEPTED;
      buf[1] = 0xFF; // ack for finish write
      setResponse(buf, 2);
      break;
  }
}
